(* 
Drzewa lewicowe
Przemysław Perkowski
Code review - Paweł Perzyna
*)

type 'a queue = Null | Node of 'a * int * 'a queue * 'a queue

exception Empty

let empty = Null

let height x =
   match x with 
   | Node (_, o, _, _) -> o
   | _ -> 0

let rec join x y =
   match (x, y) with
   | (Null, _) -> y
   | (_, Null) -> x
   | ( Node (a, ah, al, ar), Node (b, bh, bl, br)) -> 
      if(a > b) then join y x
      else 
         let tmp = join ar y in
         if height al > height tmp
            then Node (a, (height tmp + 1), al, tmp)
            else Node (a, (height al + 1), tmp, al)

let add el x = 
   join (Node (el, 0, Null, Null)) x

let delete_min x =
   match x with
   | Null -> raise Empty
   | Node (a, _, al, ar) -> (a, join al ar)

let is_empty x = (x = Null)
